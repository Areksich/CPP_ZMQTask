#pragma once

#include <atomic>
#include <iostream>
#include <mutex>
#include <thread>
#include <zmq.hpp>

#include "../common/Student.h"
#include "Serializer.h"

class ZmqSyncedSubscriber {
 public:
  ZmqSyncedSubscriber(const std::string& subEndpoint,
                      const std::string& syncEndpoint)
      : subEndpoint_(subEndpoint),
        syncEndpoint_(syncEndpoint),
        running_(false),
        dataReceived_(false) {}

  ~ZmqSyncedSubscriber() { stop(); }

  // –ó–∞–ø—É—Å–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
  void start() {
    if (running_) {
      std::cerr << "‚ö†Ô∏è  Subscriber —É–∂–µ –∑–∞–ø—É—â–µ–Ω" << std::endl;
      return;
    }

    running_ = true;
    dataReceived_ = false;
    subscribeThread_ = std::thread(&ZmqSyncedSubscriber::subscribeLoop, this);

    std::cout << "üì° Synced Subscriber –∑–∞–ø—É—â–µ–Ω" << std::endl;
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  void stop() {
    if (!running_) return;

    running_ = false;
    if (subscribeThread_.joinable()) {
      subscribeThread_.join();
    }

    std::cout << "üì° Synced Subscriber –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" << std::endl;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  std::vector<Student> getReceivedData() {
    std::lock_guard<std::mutex> lock(dataMutex_);
    return receivedStudents_;
  }

  bool isDataReceived() const { return dataReceived_; }
  bool isRunning() const { return running_; }

 private:
  void subscribeLoop() {
    try {
      zmq::context_t context(1);

      // SUB —Å–æ–∫–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      zmq::socket_t subscriber(context, zmq::socket_type::sub);
      subscriber.connect(subEndpoint_);
      subscriber.set(zmq::sockopt::subscribe, "students");

      // REQ —Å–æ–∫–µ—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å publisher
      zmq::socket_t syncClient(context, zmq::socket_type::req);
      syncClient.connect(syncEndpoint_);

      std::cout << "üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É:" << std::endl;
      std::cout << "   SUB: " << subEndpoint_ << std::endl;
      std::cout << "   SYNC: " << syncEndpoint_ << std::endl;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ publisher'—É
      std::cout << "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏..." << std::endl;
      zmq::message_t syncMsg(5);
      memcpy(syncMsg.data(), "READY", 5);
      syncClient.send(syncMsg, zmq::send_flags::none);

      // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      zmq::message_t reply;
      auto result = syncClient.recv(reply, zmq::recv_flags::none);

      if (!result) {
        std::cerr << "‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞" << std::endl;
        running_ = false;
        return;
      }

      std::cout << "‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –¥–∞–Ω–Ω—ã—Ö"
                << std::endl;

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è
      subscriber.set(zmq::sockopt::rcvtimeo, 1000);

      std::cout << "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..." << std::endl;

      int attempts = 0;
      const int MAX_ATTEMPTS = 30;

      while (running_ && attempts < MAX_ATTEMPTS) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø–∏–∫
          zmq::message_t topic;
          result = subscriber.recv(topic, zmq::recv_flags::none);

          if (!result) {
            attempts++;
            continue;
          }

          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
          zmq::message_t message;
          result = subscriber.recv(message, zmq::recv_flags::none);

          if (!result) {
            attempts++;
            continue;
          }

          std::cout << "üì• –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã (" << message.size() << " –±–∞–π—Ç)"
                    << std::endl;

          // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
          std::string data(static_cast<char*>(message.data()), message.size());
          std::vector<Student> students = Serializer::deserialize(data);

          std::cout << "‚úÖ –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ " << students.size() << " —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"
                    << std::endl;

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
          {
            std::lock_guard<std::mutex> lock(dataMutex_);
            receivedStudents_ = students;
          }

          dataReceived_ = true;
          break;

        } catch (const zmq::error_t& e) {
          if (e.num() != EAGAIN) {
            throw;
          }
          attempts++;
        }
      }

      if (!dataReceived_) {
        std::cerr << "‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è" << std::endl;
      }

    } catch (const zmq::error_t& e) {
      std::cerr << "‚ùå ZMQ Synced Subscriber –æ—à–∏–±–∫–∞: " << e.what() << std::endl;
    }

    running_ = false;
  }

  std::string subEndpoint_;
  std::string syncEndpoint_;
  std::atomic<bool> running_;
  std::atomic<bool> dataReceived_;
  std::thread subscribeThread_;
  std::vector<Student> receivedStudents_;
  std::mutex dataMutex_;
};