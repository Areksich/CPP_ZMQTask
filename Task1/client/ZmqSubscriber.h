#pragma once

#include <atomic>
#include <iostream>
#include <mutex>
#include <thread>
#include <zmq.hpp>

#include "../common/Student.h"
#include "Serializer.h"

class ZmqSubscriber {
 public:
  ZmqSubscriber(const std::string& endpoint)
      : endpoint_(endpoint), running_(false), dataReceived_(false) {}

  ~ZmqSubscriber() { stop(); }

  // –ó–∞–ø—É—Å–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
  void start() {
    if (running_) {
      std::cerr << "‚ö†Ô∏è  Subscriber —É–∂–µ –∑–∞–ø—É—â–µ–Ω" << std::endl;
      return;
    }

    running_ = true;
    dataReceived_ = false;
    subscribeThread_ = std::thread(&ZmqSubscriber::subscribeLoop, this);

    std::cout << "üì° Subscriber –∑–∞–ø—É—â–µ–Ω, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ " << endpoint_
              << std::endl;
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  void stop() {
    if (!running_) return;

    running_ = false;
    if (subscribeThread_.joinable()) {
      subscribeThread_.join();
    }

    std::cout << "üì° Subscriber –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" << std::endl;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  std::vector<Student> getReceivedData() {
    std::lock_guard<std::mutex> lock(dataMutex_);
    return receivedStudents_;
  }

  bool isDataReceived() const { return dataReceived_; }

  bool isRunning() const { return running_; }

 private:
  void subscribeLoop() {
    try {
      // –°–æ–∑–¥–∞–µ–º ZMQ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–æ–∫–µ—Ç
      zmq::context_t context(1);
      zmq::socket_t subscriber(context, zmq::socket_type::sub);

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ publisher
      subscriber.connect(endpoint_);

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ–ø–∏–∫ "students"
      subscriber.set(zmq::sockopt::subscribe, "students");

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è
      subscriber.set(zmq::sockopt::rcvtimeo, 1000);  // 1 —Å–µ–∫—É–Ω–¥–∞

      std::cout << "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..." << std::endl;

      int attempts = 0;
      const int MAX_ATTEMPTS = 30;  // 30 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è

      while (running_ && attempts < MAX_ATTEMPTS) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø–∏–∫
          zmq::message_t topic;
          auto result = subscriber.recv(topic, zmq::recv_flags::none);

          if (!result) {
            attempts++;
            continue;
          }

          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
          zmq::message_t message;
          result = subscriber.recv(message, zmq::recv_flags::none);

          if (!result) {
            attempts++;
            continue;
          }

          std::cout << "üì• –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã (" << message.size() << " –±–∞–π—Ç)"
                    << std::endl;

          // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
          std::string data(static_cast<char*>(message.data()), message.size());

          std::vector<Student> students = Serializer::deserialize(data);

          std::cout << "‚úÖ –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ " << students.size() << " —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"
                    << std::endl;

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
          {
            std::lock_guard<std::mutex> lock(dataMutex_);
            receivedStudents_ = students;
          }

          dataReceived_ = true;
          break;

        } catch (const zmq::error_t& e) {
          if (e.num() != EAGAIN) {  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–∞–π–º–∞—É—Ç—ã
            throw;
          }
          attempts++;
        }
      }

      if (!dataReceived_) {
        std::cerr << "‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è" << std::endl;
      }

    } catch (const zmq::error_t& e) {
      std::cerr << "‚ùå ZMQ Subscriber –æ—à–∏–±–∫–∞: " << e.what() << std::endl;
    }

    running_ = false;
  }

  std::string endpoint_;
  std::atomic<bool> running_;
  std::atomic<bool> dataReceived_;
  std::thread subscribeThread_;
  std::vector<Student> receivedStudents_;
  std::mutex dataMutex_;
};