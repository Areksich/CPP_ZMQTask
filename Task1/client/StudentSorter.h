#pragma once

#include <algorithm>
#include <iomanip>
#include <iostream>

#include "Student.h"

class StudentSorter {
 public:
  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –§–ò–û
  static void sortByFullName(std::vector<Student>& students) {
    std::cout << "\nüî§ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –§–ò–û..." << std::endl;

    std::sort(students.begin(), students.end(),
              [](const Student& a, const Student& b) {
                return a.getFullName() < b.getFullName();
              });

    std::cout << "‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" << std::endl;
  }

  // –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω
  static void displayStudents(const std::vector<Student>& students) {
    std::cout << "\n" << std::string(70, '=') << std::endl;
    std::cout << "üìã –°–ü–ò–°–û–ö –°–¢–£–î–ï–ù–¢–û–í (" << students.size() << ")" << std::endl;
    std::cout << std::string(70, '=') << std::endl;

    if (students.empty()) {
      std::cout << "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç" << std::endl;
    } else {
      std::cout << std::left;
      std::cout << std::setw(15) << "ID" << std::setw(35) << "–§–ò–û"
                << "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è" << std::endl;
      std::cout << std::string(70, '-') << std::endl;

      for (const auto& student : students) {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º ID
        std::string idsStr;
        for (size_t i = 0; i < student.ids.size(); ++i) {
          idsStr += std::to_string(student.ids[i]);
          if (i < student.ids.size() - 1) {
            idsStr += ", ";
          }
        }

        std::cout << std::setw(15) << idsStr << std::setw(35)
                  << student.getFullName() << student.birthDate.toString()
                  << std::endl;
      }
    }

    std::cout << std::string(70, '=') << std::endl;
  }
};