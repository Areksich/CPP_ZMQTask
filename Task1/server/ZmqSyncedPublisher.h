#pragma once

#include <atomic>
#include <chrono>
#include <iostream>
#include <thread>
#include <zmq.hpp>

#include "../common/Student.h"
#include "Serializer.h"

class ZmqSyncedPublisher {
 public:
  ZmqSyncedPublisher(const std::string& pubEndpoint,
                     const std::string& syncEndpoint)
      : pubEndpoint_(pubEndpoint),
        syncEndpoint_(syncEndpoint),
        running_(false) {}

  ~ZmqSyncedPublisher() { stop(); }

  // –ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
  void start(const std::vector<Student>& students,
             int expectedSubscribers = 1) {
    if (running_) {
      std::cerr << "‚ö†Ô∏è  Publisher —É–∂–µ –∑–∞–ø—É—â–µ–Ω" << std::endl;
      return;
    }

    running_ = true;
    studentsData_ = students;
    expectedSubscribers_ = expectedSubscribers;
    publishThread_ = std::thread(&ZmqSyncedPublisher::publishLoop, this);

    std::cout << "üì° Synced Publisher –∑–∞–ø—É—â–µ–Ω" << std::endl;
    std::cout << "   PUB: " << pubEndpoint_ << std::endl;
    std::cout << "   SYNC: " << syncEndpoint_ << std::endl;
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
  void stop() {
    if (!running_) return;

    running_ = false;
    if (publishThread_.joinable()) {
      publishThread_.join();
    }

    std::cout << "üì° Synced Publisher –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" << std::endl;
  }

  bool isRunning() const { return running_; }

 private:
  void publishLoop() {
    try {
      zmq::context_t context(1);

      // PUB —Å–æ–∫–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      zmq::socket_t publisher(context, zmq::socket_type::pub);
      publisher.bind(pubEndpoint_);

      // REP —Å–æ–∫–µ—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏
      zmq::socket_t syncService(context, zmq::socket_type::rep);
      syncService.bind(syncEndpoint_);

      std::cout << "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è " << expectedSubscribers_
                << " –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤..." << std::endl;

      // –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª—ã –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
      int subscribersReady = 0;
      while (subscribersReady < expectedSubscribers_ && running_) {
        zmq::message_t message;
        auto result = syncService.recv(message, zmq::recv_flags::dontwait);

        if (result) {
          subscribersReady++;
          std::cout << "   –ü–æ–¥–ø–∏—Å—á–∏–∫ #" << subscribersReady << " –≥–æ—Ç–æ–≤"
                    << std::endl;

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
          zmq::message_t reply(2);
          memcpy(reply.data(), "OK", 2);
          syncService.send(reply, zmq::send_flags::none);
        }

        std::this_thread::sleep_for(std::chrono::milliseconds(100));
      }

      if (subscribersReady < expectedSubscribers_) {
        std::cerr << "‚ö†Ô∏è  –ù–µ –≤—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å" << std::endl;
        running_ = false;
        return;
      }

      std::cout << "‚úÖ –í—Å–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –≥–æ—Ç–æ–≤—ã, –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É" << std::endl;

      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      std::this_thread::sleep_for(std::chrono::milliseconds(200));

      // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
      std::string data = Serializer::serialize(studentsData_);

      std::cout << "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö (" << studentsData_.size()
                << " —Å—Ç—É–¥–µ–Ω—Ç–æ–≤)..." << std::endl;

      int messagesSent = 0;
      const int MAX_MESSAGES = 5;

      while (running_ && messagesSent < MAX_MESSAGES) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ø–∏–∫ –∏ –¥–∞–Ω–Ω—ã–µ
        zmq::message_t topic(8);
        memcpy(topic.data(), "students", 8);
        publisher.send(topic, zmq::send_flags::sndmore);

        zmq::message_t message(data.size());
        memcpy(message.data(), data.c_str(), data.size());
        publisher.send(message, zmq::send_flags::none);

        messagesSent++;
        std::cout << "   –°–æ–æ–±—â–µ–Ω–∏–µ " << messagesSent << "/" << MAX_MESSAGES
                  << " –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" << std::endl;

        std::this_thread::sleep_for(std::chrono::milliseconds(100));
      }

      std::cout << "‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" << std::endl;

      // –î–∞–µ–º –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      std::this_thread::sleep_for(std::chrono::milliseconds(500));

    } catch (const zmq::error_t& e) {
      std::cerr << "‚ùå ZMQ Synced Publisher –æ—à–∏–±–∫–∞: " << e.what() << std::endl;
    }

    running_ = false;
  }

  std::string pubEndpoint_;
  std::string syncEndpoint_;
  std::atomic<bool> running_;
  std::thread publishThread_;
  std::vector<Student> studentsData_;
  int expectedSubscribers_;
};