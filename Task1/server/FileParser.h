#pragma once

#include <fstream>
#include <iostream>
#include <sstream>
#include <vector>

#include "../common/Validator.h"
#include "Student.h"

class FileParser {
 public:
  // –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏
  static std::vector<Student> parseFile(const std::string& filename) {
    std::vector<Student> students;
    std::ifstream file(filename);

    if (!file.is_open()) {
      std::cerr << "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: " << filename
                << std::endl;
      return students;
    }

    std::cout << "üìÇ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: " << filename << std::endl;

    std::string line;
    int lineNumber = 0;
    int validCount = 0;
    int invalidCount = 0;

    while (std::getline(file, line)) {
      lineNumber++;

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (line.empty() ||
          line.find_first_not_of(" \t\r\n") == std::string::npos) {
        continue;
      }

      Student student;
      if (parseLine(line, student)) {
        if (Validator::validateStudent(student)) {
          students.push_back(student);
          validCount++;
        } else {
          std::cerr << "   –°—Ç—Ä–æ–∫–∞ " << lineNumber
                    << " –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏" << std::endl;
          invalidCount++;
        }
      } else {
        std::cerr << "   –°—Ç—Ä–æ–∫–∞ " << lineNumber << ": –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: " << line
                  << std::endl;
        invalidCount++;
      }
    }

    file.close();

    std::cout << "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: " << validCount << " –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"
              << std::endl;
    if (invalidCount > 0) {
      std::cout << "‚ö†Ô∏è  –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: " << invalidCount << " –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"
                << std::endl;
    }

    return students;
  }

 private:
  // –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: ID FirstName MiddleName LastName DD.MM.YYYY
  static bool parseLine(const std::string& line, Student& student) {
    std::istringstream iss(line);
    int id;
    std::string firstName, middleName, lastName, dateStr;

    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if (!(iss >> id >> firstName >> middleName >> lastName >> dateStr)) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–µ—Ç –ª–∏—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    std::string extra;
    if (iss >> extra) {
      std::cerr << "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –õ–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ: " << extra
                << std::endl;
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    student.ids.push_back(id);
    student.firstName = firstName;
    student.middleName = middleName;
    student.lastName = lastName;

    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
    return Validator::parseDate(dateStr, student.birthDate);
  }
};