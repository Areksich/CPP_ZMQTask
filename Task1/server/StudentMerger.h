#pragma once

#include <algorithm>
#include <iostream>
#include <map>

#include "../common/Student.h"

class StudentMerger {
 public:
  // –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ø–∏—Å–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –æ–±—ä–µ–¥–∏–Ω—è—è –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –§–ò–û –∏ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è
  static std::vector<Student> mergeStudents(const std::vector<Student>& list1,
                                            const std::vector<Student>& list2) {
    std::cout << "\nüîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤..." << std::endl;
    std::cout << "   –°–ø–∏—Å–æ–∫ 1: " << list1.size() << " –∑–∞–ø–∏—Å–µ–π" << std::endl;
    std::cout << "   –°–ø–∏—Å–æ–∫ 2: " << list2.size() << " –∑–∞–ø–∏—Å–µ–π" << std::endl;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º map –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∫–ª—é—á—É
    std::map<std::string, Student> studentMap;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞
    for (const auto& student : list1) {
      addStudentToMap(studentMap, student);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Å–ø–∏—Å–∫–∞
    for (const auto& student : list2) {
      addStudentToMap(studentMap, student);
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º map –æ–±—Ä–∞—Ç–Ω–æ –≤ vector
    std::vector<Student> mergedList;
    mergedList.reserve(studentMap.size());

    for (auto& pair : studentMap) {
      mergedList.push_back(std::move(pair.second));
    }

    int duplicatesFound = (list1.size() + list2.size()) - mergedList.size();

    std::cout << "‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:" << std::endl;
    std::cout << "   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: " << mergedList.size() << std::endl;
    if (duplicatesFound > 0) {
      std::cout << "   –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: " << duplicatesFound << std::endl;
    }

    return mergedList;
  }

 private:
  static void addStudentToMap(std::map<std::string, Student>& studentMap,
                              const Student& student) {
    std::string key = student.getUniqueKey();

    auto it = studentMap.find(key);
    if (it != studentMap.end()) {
      // –°—Ç—É–¥–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º ID
      for (int id : student.ids) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
        if (std::find(it->second.ids.begin(), it->second.ids.end(), id) ==
            it->second.ids.end()) {
          it->second.ids.push_back(id);
        }
      }
      std::cout << "   üîó –î—É–±–ª–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω: " << student.getFullName()
                << " (ID –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã)" << std::endl;
    } else {
      // –ù–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç
      studentMap[key] = student;
    }
  }
};