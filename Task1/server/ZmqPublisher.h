#pragma once

#include <atomic>
#include <chrono>
#include <iostream>
#include <thread>
#include <zmq.hpp>

#include "../common/Student.h"
#include "Serializer.h"

class ZmqPublisher {
 public:
  ZmqPublisher(const std::string& endpoint)
      : endpoint_(endpoint), running_(false) {}

  ~ZmqPublisher() { stop(); }

  // –ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
  void start(const std::vector<Student>& students) {
    if (running_) {
      std::cerr << "‚ö†Ô∏è  Publisher —É–∂–µ –∑–∞–ø—É—â–µ–Ω" << std::endl;
      return;
    }

    running_ = true;
    publishThread_ = std::thread(&ZmqPublisher::publishLoop, this, students);

    std::cout << "üì° Publisher –∑–∞–ø—É—â–µ–Ω –Ω–∞ " << endpoint_ << std::endl;
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
  void stop() {
    if (!running_) return;

    running_ = false;
    if (publishThread_.joinable()) {
      publishThread_.join();
    }

    std::cout << "üì° Publisher –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" << std::endl;
  }

  bool isRunning() const { return running_; }

 private:
  void publishLoop(const std::vector<Student> students) {
    try {
      // –°–æ–∑–¥–∞–µ–º ZMQ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–æ–∫–µ—Ç
      zmq::context_t context(1);
      zmq::socket_t publisher(context, zmq::socket_type::pub);

      // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç
      publisher.bind(endpoint_);

      // –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
      std::this_thread::sleep_for(std::chrono::milliseconds(500));

      // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
      std::string data = Serializer::serialize(students);

      std::cout << "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö (" << students.size() << " —Å—Ç—É–¥–µ–Ω—Ç–æ–≤)..."
                << std::endl;

      int messagesSent = 0;
      const int MAX_MESSAGES = 10;  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏

      while (running_ && messagesSent < MAX_MESSAGES) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ø–∏–∫ –∏ –¥–∞–Ω–Ω—ã–µ
        zmq::message_t topic(8);
        memcpy(topic.data(), "students", 8);
        publisher.send(topic, zmq::send_flags::sndmore);

        zmq::message_t message(data.size());
        memcpy(message.data(), data.c_str(), data.size());
        publisher.send(message, zmq::send_flags::none);

        messagesSent++;
        std::cout << "   –°–æ–æ–±—â–µ–Ω–∏–µ " << messagesSent << "/" << MAX_MESSAGES
                  << " –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" << std::endl;

        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
      }

      std::cout << "‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" << std::endl;

      // –î–∞–µ–º –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      std::this_thread::sleep_for(std::chrono::milliseconds(500));

    } catch (const zmq::error_t& e) {
      std::cerr << "‚ùå ZMQ Publisher –æ—à–∏–±–∫–∞: " << e.what() << std::endl;
    }

    running_ = false;
  }

  std::string endpoint_;
  std::atomic<bool> running_;
  std::thread publishThread_;
};